#Homework 3 Compiler
#Mrigya Agarwal, Christine Graff, Giuseppe Mendola
#Use Python version 2

import sys
import operator
import os
import a3test
from AstClasses import *
import compiler


#keeps track of the current variable in use so they can be incremented
#by genSym()
varName = 4
#the list of flattened statement nodes
flatStmts = [];
variables = [];

#gets creates an ast from the contenst of a file name given as an argument
#generates LLVM code from the contents of the file
def compile():
	#check that the user has given exactly one file as input
	assert(len(sys.argv) == 2);
	
	#the file to interpret is the first argument given
	filePath = sys.argv[1]
	#abstract syntax tree for the contents of the file
	ast=a3test.getAST()
	#ast2 = compiler.parseFile(filePath)
	#print ast2
	
	print "original ast: ", ast, "\n ********"
	#flatten the ast
	#(fill the flatStmts tree with assignment statements)
	
	boxingPass(ast);
	
	print ast
	
	flatten(ast)
	
	print "FLATTENED AST"
	for s in flatStmts:
		print s

#	print '@.str = private unnamed_addr constant [3 x i8] c"%d\\00", align 1'
#	print '@.str1 = private unnamed_addr constant [4 x i8] c"%d\\0A\\00", align 1'
#	print 'define i32 @input() nounwind uwtable ssp { '
#	
#	
#	print '  %n = alloca i32, align 4'
#	print '  %1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* %n)'
#	print '  %2 = load i32* %n, align 4'
#	print '  ret i32 %2'
#	print '}\n'
#	print 'declare i32 @scanf(i8*, ...)\n'
#
#	
#	print 'define i32 @print_int_nl(i32 %x) nounwind uwtable ssp { '
#	print '  %1 = alloca i32, align 4'
#	print '  store i32 %x, i32* %1, align 4'
#	print '  %2 = load i32* %1, align 4'
#	print '  %3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %2)'
#	print '  ret i32 0'
#	print '}\n'
#	print 'declare i32 @printf(i8*, ...)'
		
	#output first line needed for the .ll file
#	print "define i32 @main() nounwind uwtable ssp {"
#	
#	#print "statements list after flattening: ", flatStmts
#	alloc()
#	
#	#TODO: before generating the llvm code from the statements,
#	#iterate over the flatStmts list and generate
#	#an alloca for each variable (so you don't have to worry about it later)
#	
#	#iterate through all of the statments generated by the
#	#flattening (located in flatStmts list)
#	#and generate LLVM code
#	for s in flatStmts:
#		astToLLVM(s, None)
#	
#	#output what you need for the end of the main function in the .ll file
#	print "	 "+"ret i32 0"
#	print "}"
#	print "declare double @floor(double) nounwind readnone"
#	print "declare double @llvm.pow.f64(double, double) nounwind readonly"
		

#adds necessary boxing and unboxing instructions to the ast
def boxingPass(n):
	
	if isinstance(n, Module):
		boxingPass(n.nodes)
		return n
		
	
	elif isinstance(n,Stmt):
		for x in n.nodes:
			boxingPass(x)
		return n

	elif isinstance(n, Discard):
		n.expr = boxingPass(n.expr)
		return n
			
	elif isinstance(n,Const):
		if not isinstance(n.value, int):
			sys.exit('ERROR! All constants must be integer values')
		
		#check here to make sure the integer is not loger than 30 bits
		if n.value.bit_length() > 30:
			sys.exit('ERROR! Integers cannot be longer than 30 bits')
		#to Tag, create a Tag object with int flag because we tag ints differently than
		#booleans. The actual tagging occurs at runtime
		temp = Tag(n, "int")
		n = temp
		return n
			
	elif isinstance(n, Name):
		return n
			
	elif isinstance(n,BoolExp):
		#a boolean expression should untag each side of the boolean operator and then
		#tag the result
		tempL = boxingPass(n.left)
		tempR = boxingPass(n.right)
		#untag all by shifting left 2 (booleans treated as integers in this case)
		n.left = ConvertToInt(tempL)
		n.right = ConvertToInt(tempR)
		#to Tag, create a Tag object with bool flag because we tag ints differently than
		#booleans. The actual tagging occurs at runtime
		#the result will always be a boolean
		box = Tag(n, "bool")
		return box
				

	elif isinstance(n, Bool):
		#tag as a bool
		temp = Tag(n, "bool")
		return temp
		

	elif isinstance(n,Assign):
		if not isinstance(n.name, AssName): #or len(n.nodes)>1:
			sys.exit('Tuple assignment not permitted')
		else:
			n.expr = boxingPass(n.expr)
			return n

	if isinstance(n,Add) or isinstance(n,Div) or isinstance(n,Sub) or isinstance(n,Mul) or isinstance(n, LeftShift) or isinstance(n, RightShift) or isinstance(n,Power) or isinstance(n, Mod) or isinstance(n, FloorDiv):
		#if the left and right are integers, they will be boxed.
		#if they are names, their values have already been boxed.
		tempL = boxingPass(n.left)
		tempR = boxingPass(n.right)
		#to unbox, shift right by 2 for both bools and ints
		n.left= ConvertToInt(tempL)
		n.right = ConvertToInt(tempR)
		#the result will be an int, so tag as int
		box = Tag(n, "int")
		return box
	
	if isinstance(n, IfNode):
		n.expr = boxingPass(n.expr)
		for i in range(0,len(n.nodes)):
			n.nodes[i] = boxingPass(n.nodes[i])
		for i in range(0,len(n.alt)):
			n.alt[i] = boxingPass(n.alt[i])
		return n

	if isinstance(n, WhileNode):
		n.expr = boxingPass(n.expr)
		for i in range(0,len(n.nodes)):
			n.nodes[i] = boxingPass(n.nodes[i])

	if isinstance(n, Printnl):
		if (len(n.nodes) != 1):
			sys.exit('Print accepts a single integer value')
		n.nodes[0] = boxingPass(n.nodes[0])
		#When you untag before printing, you will have to check at runtime whether
		#the value being printed is an int or a bool, so you print the right thing
		#the Untag object (as opposed to ConvertToInt and ConvertToBool) could be
		#untagging either a boolean or an integer
		n.nodes[0] = Untag(n.nodes[0])
		return n
		
	
		
			
	


#takes a non flattened ast and returns a flattened ast
def flatten(n):
	
	if isinstance(n, Module):
		flatten(n.nodes)
	#iterate through all of the statement nodes 
	elif isinstance(n, Stmt):
		for x in n.nodes:
			flattenStmt(x)

def flattenStmt(n):
	#if you have an Assign, then use the given variable to assign
	#to the expression
	if isinstance(n, Assign):
		if not isinstance(n.name, AssName): #or len(n.nodes)>1:
			sys.exit('Tuple assignment not permitted')

		if isinstance(n.expr, Name):
			x = genSymFromVar(n.name.name)
			temp = Assign(AssName(x),Name(flattenExp(n.expr,genSym())))
			variables.append(x)
			flatStmts.append(temp)
			
		else:
			variables.append(n.name.name)
			flattenExp(n.expr, genSymFromVar(n.name.name))
		
	#if you have a discard, then generate a variable to assign
	#to the expression
	elif isinstance(n, Discard):
		flattenExp(n.expr, genSym())

	elif isinstance(n, Printnl):
		if (len(n.nodes) != 1):
			sys.exit('Print accepts a single integer value')
		a = genSym()
		b = genSym()
		t1 = flattenExp(n.nodes[0], a)
		n.nodes[0] = Name(t1)
		temp = Assign(AssName(b), n)
		flatStmts.append(temp)
		return b
	
	elif isinstance(n, AugAssign):
		a = genSym()
		flattened_expr = flattenExp(n.exp, a)
		#t1 = Name(flattened_expr)
		n.exp = Name(a)
		x = genSymFromVar(n.name.name)
		if n.name.name not in variables:
			sys.exit('ERROR! Use of undefined variable '+n.name.name)
		n.name = Name(x)
		temp = Assign(AssName(x),n)
		flatStmts.append(temp)


		

	else:
		sys.exit('unrecognized AST')



def flattenExp(n, x):
	#assign a constant to the given variable and append to list
	if isinstance(n,Const):
		if not isinstance(n.value, int):
			sys.exit('ERROR! All constants must be integer values')
		temp = Assign(AssName(x),n)
		flatStmts.append(temp)
		return x
	#if we have a name, return a variable of the form %v
	elif isinstance(n,Name):
		a = genSymFromVar(n.name)
		if n.name not in variables:
			sys.exit('ERROR! Use of undefined variable '+n.name)
		return a

	elif isinstance(n, Bool):
		temp = Assign(AssName(x), n)
		flatStmts.append(temp)
		return x

	elif isinstance(n, Tag) or isinstance(n,Untag) or isinstance(n, ConvertToBool) or isinstance(n, ConvertToInt):
		if isinstance(n.node, Const):
			temp = Assign(AssName(x), n)
			flatStmts.append(temp)
			return x
		elif isinstance(n.node, Bool):
			temp = Assign(AssName(x), n)
			flatStmts.append(temp)
			return x
		else:
			a = genSym()
			n.node = flattenExp(n.node,a)
			temp = Assign(AssName(x),n)
			flatStmts.append(temp)
			return x

			
	

	elif isinstance(n,Add) or isinstance(n,Div) or isinstance(n,Sub) or isinstance(n,Mul) or isinstance(n, LeftShift) or isinstance(n, RightShift) or isinstance(n,Power) or isinstance(n, Mod) or isinstance(n, FloorDiv):
		#generate symbols a and b 
		a = genSym()
		b = genSym()
		#use them to assign to constants (or if Names are the operands, will just return variable)
		leftStmt = flattenExp(n.left, a )
		rightStmt = flattenExp(n.right, b)
		#now we use the same operator object n and just change its left and right values
		n.left = Name(leftStmt)
		n.right = Name(rightStmt)
		#assign the add operation n to the varialbe x and append to the statements list
		temp = Assign(AssName(x),n)
		flatStmts.append(temp)
		return x

	elif isinstance(n,UnarySub) or isinstance(n, UnaryAdd):
		#tempExpr will take the value of the name assigned to it
		tempExpr = flattenExp(n.expr, x)
		#change the expression of the unary sub to the variable you assigned
		#to its expression when you flattened it
		n.expr = Name(tempExpr)
		#now assign the modified UnarySub, n, to variable x
		#and append it to the list
		temp = Assign(AssName(x),n)
		flatStmts.append(temp)
		return x

	elif isinstance(n, Bitand) or isinstance(n,Bitor) or isinstance(n, Bitxor):
		var = dict()
		lst = []
		#generate symbols and assign them to the first two
		#nodes of the bit operator
		a = genSym()
		b = genSym()
		flattened_exp1 = flattenExp(n.left, a)
		flattened_exp2 = flattenExp(n.right, b)
		
		#create the propper operation for the assignment
		if isinstance(n, Bitand):
			op = Bitand(Name(flattened_exp1),Name(flattened_exp2))
		elif isinstance(n, Bitor):
			op = Bitor(Name(flattened_exp1),Name(flattened_exp2))
		elif isinstance(n, Bitxor):
			op = Bitxor(Name(flattened_exp1),Name(flattened_exp2))
		
		#make the assignment to the bit operator needed and add it to the
		#flatStmts list
		temp = Assign(AssName(x),op)
		flatStmts.append(temp)
		
		#if you only have 2 operands,
		#add the assignment to the flatStmts list
		#note: the constant assignments were already made when you
		#called flattenExp on n.nodes[0] and n.nodes[1]
			#if len(n.nodes)==2:
		return x

	elif isinstance(n, Invert):
		a = genSym()
		flattened_expr = flattenExp(n.expr, a)
		t1 = Name(flattened_expr)
		n.expr = t1
		temp = Assign(AssName(x),n)
		flatStmts.append(temp)



	elif isinstance(n, CallFunc):
		lst = []
		for i in range(0, len(n.args)):
			a = genSym()
			flattened_expr = flattenExp(n.args[i], a)
			lst.append(Name(flattened_expr))
		n.args = lst
		temp = Assign(AssName(x), n)
		flatStmts.append(temp)
		return x
		
	
	else:
		sys.exit('unrecognized AST')

		
				
			
			
#generates a unique variable name
def genSym():
	global varName
	name= '%.'+ str(varName)
	varName += 1
	return name

#adds a % infront of a given variable name to generate
#an llvm-friendly variable
def genSymFromVar(v):
	vStr = "%."+v
	return vStr

#prints all alloca instructions for the variables in the flatStmts list
def alloc():
	
	lst = []
	for element in flatStmts:
		if element.name.name not in lst:
			lst.append(element.name.name)
			
	for element in lst:
		print "	 "+element + " = alloca i32, align 4"


#generates llvm code from the Assign statements in the flatStmts list
def astToLLVM(ast, x):
	
	
	if isinstance(ast, Assign):
		#if the assign statement has only one constant or name to the right of the equals sign, output a store instruction
		if isinstance(ast.expr, Const):
			codegen_assign_const(ast)
		
		if isinstance(ast.expr, Name):
			codegen_assign_name(ast)
		
		#otherwise it means there is a more complex expression to the right of the equals sign
		#we need to go deeper
		else:
			astToLLVM(ast.expr, ast.name.name)
	
	elif isinstance(ast, Const):
		return str(ast.value)
	
	
	elif isinstance(ast, Add):
		return codegen_binop(ast,x, "add")
	
	elif isinstance(ast, Sub):
		return codegen_binop(ast,x,"sub")
	
	elif isinstance(ast, Mul):
		return codegen_binop(ast,x, "mul")
	
	elif isinstance(ast, Div):
		return codegen_binop(ast,x,"sdiv")
	
	
	elif isinstance(ast, Mod):
		return codegen_binop(ast,x, "srem")
	
	elif isinstance(ast, LeftShift):
		return codegen_binop(ast,x,"shl")
	
	elif isinstance(ast, RightShift):
		return codegen_binop(ast,x, "ashr")
	
	elif isinstance(ast, FloorDiv):
		return codegen_floordiv(ast,x)
	
	elif isinstance(ast, Power):
		return codegen_power(ast,x)
	
	
	elif isinstance(ast, Bitor):
		return codegen_binop(ast,x, "or")
	
	elif isinstance(ast, Bitand):
		return codegen_binop(ast,x, "and")
	
	elif isinstance(ast, Bitxor):
		return codegen_binop(ast,x, "xor")
	
	elif isinstance(ast, AssName):
		return ast.name
	
	elif isinstance(ast, Name):
		return ast.name
	
	elif isinstance(ast, UnarySub):
		return codegen_unary(ast,x,"us")
	
	elif isinstance(ast, UnaryAdd):
		return codegen_unary(ast,x,"ua")
	
	elif isinstance(ast, Invert):
		return codegen_invert(ast,x)
	
	elif isinstance(ast, AugAssign):
		return codegen_augassign(ast,ast.name.name,ast.op)
	
	elif isinstance(ast, Printnl):
		return codegen_print(ast, x)
	
	elif isinstance(ast, CallFunc):
		return codegen_callfunc(ast, x)




#THE LLVM CODE GENERATION METHODS


def codegen_assign_const(ast):
	output_store(str(ast.expr.value),ast.name.name)

def codegen_assign_name(ast):
	a = genSym()
	output_load(a, ast.expr.name);
	output_store(a, ast.name.name)

def codegen_binop(ast,x, op):
	#must create temporary variables for the load operations
	a = genSym()
	b = genSym()
	output_load(a, astToLLVM(ast.left,x))
	output_load(b, astToLLVM(ast.right,x))
	c = genSym()
	output_operation(c,a,b,op)
	#stores contents of c in x
	output_store(c,x)


def codegen_unary(ast,x, op):
	a = genSym()
	output_load(a, astToLLVM(ast.expr,x))
	c = genSym()
	if(op == 'us'):
		output_operation(c,"0",a,"sub")
	else:
		output_operation(c,"0",a,"add")
	output_store(c,x)

def codegen_invert(ast, x):
	a = genSym()
	output_load(a, astToLLVM(ast.expr, x))
	c = genSym()
	output_operation(c , a , "1" , "add")
	d = genSym()
	output_operation(d, "0", c , "sub" )
	output_store(d, x)

def codegen_floordiv(ast,x):
	a = genSym()
	b = genSym()
	c = genSym()
	output_load(a,astToLLVM(ast.left,x))
	output_load(b,astToLLVM(ast.right,x))
	output_operation(c,a,b,"sdiv")
	f = genSym()
	output_sitofp_todouble(f,c)
	d = genSym()
	e = genSym()
	output_call(d, "double", "floor", "double "+f, "nounwind readnone" )
	output_fptosi_double(e,d)
	output_store(e, x)

def codegen_power(ast,x):
	a = genSym()
	b = genSym()
	c = genSym()
	d = genSym()
	e = genSym()
	f = genSym()
	output_load(a, astToLLVM(ast.left,x))
	output_sitofp_todouble(c,a)
	output_load(b, astToLLVM(ast.right,x))
	output_sitofp_todouble(d,b)
	output_call(e,"double","llvm.pow.f64","double "+c+","+" double "+d,"")
	output_fptosi_double(f,e)
	output_store(f,x)

def codegen_print(ast,x):
	e = astToLLVM(ast.nodes[0], x)
	a = genSym()
	b = genSym()
	output_load(a,e)
	output_call(b,"i32","print_int_nl","i32"+a,"")


def  codegen_augassign(ast, x, op):
	
	e = astToLLVM(ast.exp, x)
	llvmop = None
	if(op == "+="):
		llvmop = "add"
	elif(op == "-="):
		llvmop = "sub"
	elif(op == "/="):
		llvmop = "sdiv"
	elif(op == "*="):
		llvmop = "mul"
	elif(op == "%="):
		llvmop = "srem"
	elif (op == "<<="):
		llvmop = "shl"
	elif (op == ">>="):
		llvmop = "ashr"
	elif (op == "&="):
		llvmop = "and"
	elif (op == "|="):
		llvmop = "or"
	elif (op == "^="):
		llvmop = "xor"
	elif (op == "**="):
		llvmop = "pow"
	a = genSym()
	b = genSym()
	output_load(a, e)
	output_load(b,x)
	c = genSym()
	output_operation(c,b,a,llvmop)
	output_store(c,x)

def codegen_callfunc(ast,x):
	a = genSym()
	output_call(a,"i32",ast.node.name,"","")
	output_store(a,x)


def output_load(tempvar, val):
	print "	 "+tempvar+" = load i32* "+ val+", align 4"

def output_store(val, var):
	print "  "+"store i32 "+val+", i32* " + var+", align 4"

def output_operation(a,b,c, op):
	print "	 "+a+" = "+op+" i32 "+b+", "+c

def output_sitofp_todouble(a,b):
	print "	 "+a+" = sitofp i32 "+b+" to double"

def output_fptosi_double(a,b):
	print "	 "+a+" = fptosi double "+b+" to i32"

def output_call(a,ret,func,param,nounwind):
	print "	 "+a+" = call "+ret+" @"+func+"("+param+") "+nounwind




#calls compile to start the program
compile()









